



TODO Working Group                                          D. Vinokurov
Internet-Draft                                               M. Byington
Intended status: Standards Track                                C. Astiz
Expires: 14 April 2022                                        B. Chester
                                                            A. Pelletier
                                                                M. Lerch
                                                               Apple Inc
                                                         11 October 2021


                       Secure Credential Transfer
                 draft-securecredential-transfer-latest

Abstract

   This document describes a mechanism to transfer digital credentials
   securely between two devices Secure credentials may represent a
   digital key to a hotel room, a digital key to a door lock in a house
   or a digital key to a car.  Devices that share credentials may belong
   to the same or two different platforms (e.g. iOS and Android).
   Secure transfer may include one or more write and read operations.
   Credentials transfer needs to be performed securely due to the
   sensitive nature of the information.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 14 April 2022.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Credential transfer workflows
     3.1.  Stateless workflow
     3.2.  Stateful workflow
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Appendix A.  Acknowledgments
   Authors' Addresses

1.  Introduction

   Today, there is no standard way of transferring digital credentials
   securely between two devices belonging to the same platform or two
   different platforms.  This document proposes a solution to this
   problem by introducing a Relay server which allows devices to
   exchange encrypted Provisioning Information securely.  The Relay
   server solves this problem by creating and managing temporary mailbox
   storage.

   Each mailbox can be referenced by devices from a unique mailbox
   identifier in a URL.  The URL pointing to encrypted Provisioning
   Information is to be passed between devices directly over various
   channels (e.g.  SMS, email, messaging applications).  The exchange of
   the URL is outside of the scope of this document.

   This document describes a Hypertext (HTTP) Application Programming
   Interface (API) that allows Sender and Receiver devices to interact
   with a Relay server in order to perform secure credential transfer.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   *  Relay Server - Web application exposing Secure Credential Transfer
      API to remote devices.  It serves to securily transfer
      Provisioning Information between two remote devices.

   *  Sender device - a remote device initiating a transfer of
      Provisioning Information to another remote device (Receiver) so
      that Receiver can provision these credentials.

   *  Receiver device - a remote device that receives Provisioning
      Information from Sender and uses it to provision Credentials
      Information to an application running on it.

   *  Provisioning Partner - Third party Partner that owns, manages,
      accepts and revokes Credential Information on a remote device
      (Sender or Receiver).

   *  Provisioning Information - a set of data fields, allowing a device
      to receive Credential Information from Provisioning Partner and
      install it locally.  The entire content of Provisioning
      Information is encrypted by Sender or Receiver device.  Therefore,
      it is not visible to Relay Server.

   *  Provisioning Information - a set of data fields allowing a device
      to receive Credential Information from Provisioning Partner and
      install it locally.  The entire content of Provisioning info is
      encrypted be Sender or Receiver device; therefore, is not visible
      to Relay Server

   *  Credential Information - a set of data fields used to provision an
      access credential on the receiver's device.

   *  Transaction Information - information data structure generated by
      Receiver device required to start provisioning in the stateful
      flow.  It includes cryptographic keys generated by Receiver
      device.  Sender device needs to approve (sign) Transaction
      Information before Receiver can start provisioning.  Exact content
      of Transaction Information is specific for each Provisioning
      Partner and out of scope of this document.

   *  Secret - a symmetric encryption key shared by a pair of a Sender
      and a Receiver devices, used to encrypt Provisioning Information
      stored on a Relay server.  Secret stays the same for the entire
      credential transfer flow (one Secret per complete transfer).  All
      information stored on Relay server is always encrypted using the
      Secret.  In Stateful flow all information exchanged by Sender and
      Receiver devices throug Relay server is encrypted with the same
      Secret.  Thus, effectively, Secret has a one-to-one relation with
      the mailbox.

   *  Device Claim - a unique token allowing caller to read from /write
      to data the mailbox.  Exactly one sender device and one receiver
      device should be able to read from/write secure payload to the
      mailbox.  Sender device provides a deviceClaim in order to create
      a mailbox or update mailbox data and Relay server binds this
      Sender's Device Claim to the mailbox.  When the receiver device
      first reads data from the mailbox it presents its Device Claim to
      the Relay Server, which binds the mailbox to the given Receiver
      device.  Thus both Sender and Receiver devices are bound to the
      mailbox (allowed to read from/write to it).  Only Sender/Receiver
      devices that can present valid Device Claims are allowed to send
      subsequent read/write/update/delete calls to the mailbox.  The
      value shall be a UUID [RFC4122].

   *  Notification Token - a short or long-lived unique token stored by
      the Sender or Receiver device in a mailbox on the Relay server,
      which allows Relay server to send a push notification message to
      the Sender or Receiver device, informing them on data update in
      the mailbox.

3.  Credential transfer workflows

   We define two flows for credential transfer: 1.  Stateless (Relay
   server facilitates a single credential data transfer: Sender -> Relay
   -> Receiver) and 2.  Stateful (Relay facilitates additional datat
   transfers - there are 3 data exchanges in this flow to prepare
   credential data for provisioning by Receiver).  The details are
   provided below.

3.1.  Stateless workflow

   Stateless process starts with a Sender device composing a set of
   Provisioning Information, encrypting it with a Secret (symmetric data
   encryption key) and storing encrypted Provisioning Information on a
   Relay server in a mailbox.  A unique mailbox identifier is generated
   by a Sender device as UUID that conforms to RFC 4122 version 4,
   created using good source of entropy (peferrably hardware-based
   entropy).  Sender device generates a unique token - a Sender Device
   Claim - and stores it to the mailbox.  Device Claim allows the Sender
   device presenting it to read and write data to/from the mailbox, thus
   binding it to the mailbox.

   Sender device sends mailboxIdentifier to the Relay server as a part
   of CreateMailbox request.  Once mailbox is created, it has limited
   time to live.  When expired, mailbox shall be deleted - refer to
   DeleteMailbox endpoint.  Default expiration period has to be
   configured on the Relay server.

   Relay server builds a unique URL link to a mailbox (for example,
   "http://relayserver.com/mailbox/1234567890") and returns it to the
   Sender device, which sends the link directly to the Receiver device
   over communication channel (e.g.  SMS, email, iMessage).  In addition
   to that, Sender device passes the Secret to the Receiver device
   either through the same channel (in the same message as the URL) or
   over a different channel.

   Receiver device, having obtained both the URL link and the Secret,
   generates a unique token - Receiver Device Claim - and passes it to
   the Relay server in order to reads the encrypted Provisioning
   Information from the mailbox.

   Relay server now binds a given pair of Sender a Receiver devices to
   the mailbox by provided Sender and Receiver Device Claims.  Only
   bound devices are allowed to read or write data to the mailbox or to
   delete the mailbox.

   Receiver device, having read the encrypted Provisioning Information
   from the Relay mailbox, decrypts it with the Secret received from the
   Sender and starts credential provisioning process on the device.
   Once the Receiver device has successfully provisioned credentials, it
   deletes the mailbox by sending a DeleteMailbox call to the Relay
   server.

                      Sender              Relay                          Receiver
                        |                   |                               |
    Create and encrypt  |                   |                               |
    Provisioning Info   |——---------------->|                               |
                        |    CreateMailbox  |                               |
                        |<------------------|                               |
                        |URL link to mailbox|                               |
    Send URL link       |                   |                               |
    and Secret          |-------------------------------------------------->|
                        |                   | ReadSecureContent FromMailbox |
                        |                   |<------------------------------|
                        |                   |                               | Decrypt Provisioning Info with Secret
                        |                   |                               |
                        |                   |                               | Provision credentials

              Figure 1: Sample flow of stateless process

3.2.  Stateful workflow

   Stateful process includes additional steps to exchange the
   Provisioning Information, resulting in three data exchanges between
   Sender and Receiver.

   The process starts with a Sender device building and encrypting
   Provisioning Information, storing it on a Relay server in a unique
   mailbox.  A unique mailbox identifier is generated by the Sender
   device as UUID that conforms to RFC 4122 version 4, created from
   random data with good source of entropy (peferrably hardware-based
   entropy).

   In addition to encrypted Provisioning Information, Sender stores a
   Sender Notification Token in the mailbox, which allows Relay server
   to send a notification message to the Sender device.  Sender device
   generates a unique token - a Sender Device Claim - and stores it to
   the mailbox.  Device Claim allows the Sender device presenting it to
   read and write data to/from the mailbox, thus binding it to the
   mailbox.

   Sender device sends mailboxIdentifier to the Relay server as a part
   of CreateMailbox request.  Once mailbox is created, it has limited
   time to live.  When expired, mailbox shall be deleted - refer to
   DeleteMailbox endpoint.  Default expiration period has to be
   configured on the Relay server.

   Relay server builds a unique URL link to a mailbox (for example,
   "http://relayserver.com/mailbox/1234567890") and returns it to the
   Sender device, which sends the link directly to the Receiver device
   over communication channel (e.g.  SMS, email, iMessage).  In addition
   to the URL link, Sender device passes a Secret (e.g. symmetric
   encryption key) to the Receiver device either through the same
   channel (in the same message as the URL) or over a different channel.

   Receiver device, having obtained both the URL link and the Secret,
   generates a unique token - Receiver Device Claim - and passes it to
   the Relay server in order to read the encrypted Provisioning
   Information from the mailbox.

   Relay server now binds a given pair of Sender a Receiver devices to
   the mailbox by provided Sender and Receiver Device Claims.  Only
   bound devices are allowed to read or write data to the mailbox or to
   delete the mailbox.

   Then the Receiver device, having downloaded the encrypted
   Provisioning Information from the mailbox by URL and decrypted it
   with the secret, generates Transaction Information data structure and
   builds the following set of data fields:

   *  Transaction Information

   *  Receiver Notification Token which allows the Relay server to send
      notification messages to the Receiver device.

   Receiver device adds the two fields above to the original
   Provisioning Information, encrypts them using the Secret received
   from Sender device, then stores all in the same mailbox on the Relay
   server.  Having received the encrypted Transaction Information, the
   Relay server sends a Notification to the Sender device using the
   Sender Notification Token.

   Sender device, having received the notification from the Relay
   server, reads secure content from the mailbox and decrypts all using
   the same Secret.  Sender device generates a digital signature over
   the Receiver's Transaction Information, appends it to the
   Provisioning Information and Receiver's Transaction Information
   fields, encrypts all these fields using the Secret and stores all
   data in the mailbox on the Relay server.

   Relay server, having stored the data above, sends a notification
   message to the Receiver device using Receiver Notification Token.
   Receiver device, having received the notification, reads the
   encrypted Provisioning Information, Receiver's Transaction
   Information and Sender's Signature over the Transaction Information,
   decrypts all three fields using the same Secret and uses this data to
   start credential provisioning on device.

   Once the Receiver device has successfully provisioned credentials, it
   deletes the mailbox by sending a DeleteMailbox call to the Relay
   server.  Sender device may terminate the secure credential transfer
   by deleting the mailbox it created at any time.  Deletion of the
   mailbox on Relay server stops any on-going credential transfer
   process.

                     Sender                       Relay                     Receiver
                        |                            |                            |
    Create and encrypt  |    CreateMailbox           |                            |
    Provisioning Info   |--------------------------->|                            |
                        |    encrypted info          |                            |
                        |<---------------------------|                            |
                        |   URL link to mailbox      |                            |
                        |                            |                            |
    Send URL link       |-------------------------------------------------------->|
    and Secret          |                            |ReadSecureContentFromMailbox|
                        |                            |                            |
                        |                            |<---------------------------| Decrypt w Secret,
                        |                            |    encrypted info              |
                        |                            |    UpdateMailbox           | TxInfo=Generate TxInfo,
                        |                            |<---------------------------| encrypted info =
                        |ReadSecureContentFromMailbox|       encrypted info       | encrypt(ProvInfo,TxInfo)
                        |                            |  (ProvInfo + TxInfo)       | with Secret
    Sign TxInfo         |--------------------------->|                            |
    with OwnerKey,      |       encrypted info           |                            |
    encrypted info =    |                            |                            |
    encrypt(ProvInfo,   |     UpdateMailbox          |                            |
    TxInfo,Signature)   |—-----------—-------------->|ReadSecureContentFromMailbox|
    with Secret         |    encrypted info          |                            |
                        |                            |<---------------------------| Decrypt(ProvInfo,TxInfo,
                        |                            |  encrypted info        | Signature)
                        |                            |                            | Provision credentials

              Figure 2: Sample flow of stateful process

4.  Security Considerations

   This section discusses security considerations for the protocol.

5.  IANA Considerations

   This document has no IANA actions.

6.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://datatracker.ietf.org/doc/html/rfc2119>.

   [RFC4122]  Leach, P., Mealling, M., and R. Salz, "A Universally
              Unique IDentifier (UUID) URN Namespace", RFC 4122,
              DOI 10.17487/RFC4122, July 2005,
              <https://datatracker.ietf.org/doc/html/rfc4122>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://datatracker.ietf.org/doc/html/rfc8174>.

Appendix A.  Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Dmitry Vinokurov
   Apple Inc

   Email: dvinokurov@apple.com


   Matt Byington
   Apple Inc


   Casey Astiz
   Apple Inc


   B. Chester
   Apple Inc


   A. Pelletier
   Apple Inc


   Matthias Lerch
   Apple Inc
